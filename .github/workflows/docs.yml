name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '**/*.rst'
      - '**/*.md'
      - '**/conf.py'
      - 'pyproject.toml'
      - 'src/**/*.py'  # For autodoc changes
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**/*.rst'
      - '**/*.md'
      - '**/conf.py'
      - 'pyproject.toml'
      - 'src/**/*.py'
  release:
    types: [ published ]

permissions:
  contents: read
  pages: write
  id-token: write

# Only one Pages deployment at a time
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build HTML
        run: |
          make -C docs clean html
          # Ensure Pages doesn't try to process Jekyll
          touch docs/_build/html/.nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html

  deploy:
    # Only deploy from main (push or release)
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Configure/enable Pages right before deploy to avoid PR noise
      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  link-check:
    # Run only on PRs to avoid blocking main on flaky externals
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build HTML (non-strict)
        env:
          SPHINXOPTS: ""
        run: make -C docs html

      - name: Link check (tolerant for externals)
        env:
          # Build linkcheck with saner defaults for CI
          SPHINXOPTS: "-b linkcheck -D linkcheck_timeout=10 -D linkcheck_anchors=True -D linkcheck_workers=4 -D linkcheck_retries=2 -D linkcheck_ignore=['https://twitter.com/.*','https://.*github.com/.*#.*'] -D linkcheck_request_headers={'User-Agent': 'Mozilla/5.0 (CI linkcheck)'}"
        run: |
          make -C docs linkcheck || true
